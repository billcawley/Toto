<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:task="http://www.springframework.org/schema/task"

       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/security
       http://www.springframework.org/schema/security/spring-security.xsd
       http://www.springframework.org/schema/task
       http://www.springframework.org/schema/task/spring-task-3.0.xsd"
        >
    <!--
        Controllers are setup using annotations
        See   http://blog.springsource.org/2007/11/14/annotated-web-mvc-controllers-in-spring-25/
        for details of controller annotations
        -->
    <context:annotation-config/>
    <task:annotation-driven/>
<!--    <context:property-placeholder location="/WEB-INF/azquo.properties"/> -->

    <!-- NOTE : this is not a pooled connection! Not a problem for Azquo's purposes generally but one would want one for more intense MySQL hammering
     something like

<bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource" destroy-method="close">
    <property name="driverClassName" value="org.h2.Driver" />
    <property name="url" value="jdbc:h2:mem:xml-config" />
    <property name="username" value="sa" />
    <property name="password" value="" />
    <property name="initialSize" value="5" />
    <property name="maxActive" value="10" />
    <property name="maxIdle" value="5" />
    <property name="minIdle" value="2" />
 </bean>
     -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <!--<property name="url" value="jdbc:mysql://localhost:3306/azquo?jdbcCompliantTruncation=false&amp;useUnicode=true&amp;characterEncoding=UTF-8"/>-->
        <property name="url"
                  value="jdbc:mysql://localhost:3306/?jdbcCompliantTruncation=false&amp;useUnicode=true"/>
        <property name="username" value="toto"/>
        <property name="password" value="ark"/>
    </bean>
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
        <constructor-arg type="javax.sql.DataSource" ref="dataSource"/>
    </bean>
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- half a gig roughly, could happen for magento?-->
        <property name="maxUploadSize" value="500000000"/>
    </bean>
    <bean name="azquoMailer" class="com.azquo.util.AzquoMailer"/>
    <bean name="mySQLDatabaseManager" class="com.azquo.admin.MySQLDatabaseManager"/>
    <bean name="uploadRecordDao" class="com.azquo.admin.database.UploadRecordDAO"/>
    <bean name="businessDao" class="com.azquo.admin.business.BusinessDAO"/>
    <bean name="userDao" class="com.azquo.admin.user.UserDAO"/>
    <bean name="userChoiceDao" class="com.azquo.admin.user.UserChoiceDAO"/>
    <bean name="databaseDao" class="com.azquo.admin.database.DatabaseDAO"/>
    <bean name="loginRecordDao" class="com.azquo.admin.user.LoginRecordDAO"/>
    <bean name="accessDao" class="com.azquo.admin.user.PermissionDAO"/>
    <bean name="nameService" class="com.azquo.memorydb.service.NameService"/>
    <bean name="valueService" class="com.azquo.memorydb.service.ValueService"/>
    <bean name="standardDao" class="com.azquo.memorydb.dao.StandardDAO"/>
    <bean name="provenanceService" class="com.azquo.memorydb.service.ProvenanceService"/>
    <bean name="loginService" class="com.azquo.spreadsheet.LoginService"/>
    <bean name="importService" class="com.azquo.dataimport.ImportService"/>
    <bean name="adminService" class="com.azquo.admin.AdminService"/>
    <bean name="spreadsheetService" class="com.azquo.spreadsheet.SpreadsheetService"/>
    <bean name="jsTreeService" class="com.azquo.spreadsheet.JSTreeService"/>
    <bean name="openDatabaseDao" class="com.azquo.admin.database.OpenDatabaseDAO"/>
    <bean name="onlineReportDao" class="com.azquo.admin.onlinereport.OnlineReportDAO"/>

    <bean name="magentoService" class="com.azquo.app.magento.service.DataLoadService"/>



    <!--    <util:list id="appServices" value-type="com.azquo.spreadsheetheet.AppEntityService">
            <ref bean="feedbackService"/>
        </util:list> -->
    <!-- instantiate the memory db manager when our connection to MySQL is up :) -->
    <bean name="memoryDBManager" class="com.azquo.memorydb.core.MemoryDBManager">
        <constructor-arg type="com.azquo.memorydb.dao.StandardDAO" ref="standardDao"/>
    </bean>
    <!-- and now app conneciton maps, firs one will be for  -->
    <bean name="reviewsConnectionMap" class="com.azquo.memorydb.AppDBConnectionMap">
        <constructor-arg type="com.azquo.admin.AdminService" ref="adminService"/>
        <constructor-arg type="com.azquo.admin.MySQLDatabaseManager" ref="mySQLDatabaseManager"/>
        <constructor-arg type="com.azquo.memorydb.core.MemoryDBManager" ref="memoryDBManager"/>
        <constructor-arg type="com.azquo.admin.database.DatabaseDAO" ref="databaseDao"/>
        <constructor-arg type="int" value="11"/>
    </bean>

    <bean id="dbCron" class="com.azquo.memorydb.cron.DBCron"></bean>

    <bean name="rmiServer" class="com.azquo.rmi.RMIServer"/>
    <bean name="rmiClient" class="com.azquo.rmi.RMIClient"/>

<!--    <bean name="reviewsAuthenticationProvider" class="com.azquo.app.reviews.misc.ReviewsAuthenticationProvider"/>
    <security:http auto-config="true" use-expressions="true" >
        <security:csrf disabled="true"/>



        <security:intercept-url pattern="/api/MerchantAdmin*"               access="hasRole('ROLE_USER')" requires-channel="http" />
        <security:intercept-url pattern="/api/MerchantAdmin/*"               access="hasRole('ROLE_USER')" requires-channel="http" />
        <security:intercept-url pattern="/api/SupplierResponse*"               access="hasRole('ROLE_USER')" requires-channel="http" />
        <security:intercept-url pattern="/api/SupplierResponse/*"               access="hasRole('ROLE_USER')" requires-channel="http" />
        <security:logout logout-url="/logout" logout-success-url="/logoutSuccess.html" />
        <security:form-login login-page="/phase1/login.html" authentication-failure-url="/phase1/errorPage.html"  default-target-url="/phase1/test.html"/>

    </security:http>
    <security:authentication-manager>
        <security:authentication-provider ref="reviewsAuthenticationProvider"/>
    </security:authentication-manager>-->
</beans>
