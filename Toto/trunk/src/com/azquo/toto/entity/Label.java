package com.azquo.toto.entity;

import java.util.ArrayList;
import java.util.List;

/**
 * Created with IntelliJ IDEA.
 * User: cawley
 * Date: 16/10/13
 * Time: 19:17
 * A fundamental Toto object, labels only have names but they can have parent and child relationships with multiple
 * other labels. Sets of labels.
 *
 */
public class Label extends StandardEntity {

    // leaving here as a reminder to consider proper logging
    //private static final Logger logger = Logger.getLogger(Label.class.getName());
    // data fields
    private String name;
    private boolean labelSetLookupNeedsRebuilding;

    // memory db structure bits. There may be better ways to do this but we'll leave it here for the mo

    private List<Value> values;

    private List<Label> parents;
    private List<Label> children;
    private List<Label> peers;

    public Label() {
        this(null);
    }

    public Label(String name) {
        id = 0;
        this.name = name;
        labelSetLookupNeedsRebuilding = true;
        values = new ArrayList<Value>();
        parents = new ArrayList<Label>();
        children = new ArrayList<Label>();
    }
    // clone may be required here is we cache

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public boolean getLabelSetLookupNeedsRebuilding() {
        return labelSetLookupNeedsRebuilding;
    }

    public void setLabelSetLookupNeedsRebuilding(boolean labelSetLookupNeedsRebuilding) {
        this.labelSetLookupNeedsRebuilding = labelSetLookupNeedsRebuilding;
    }

    // Generated by Intellij, Dr. Mike thinks it a good idea, I'll follow suit
    // it's worth noting that if we start using sets and the like in anger then hash code and equals may become significant

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        Label label = (Label) o;

        return name.equals(label.name);
    }

    @Override
    public int hashCode() {
        return name.hashCode();
    }

    @Override
    public String toString() {
        return "Label{" +
                "id='" + id + '\'' +
                "name='" + name + '\'' +
                ", labelSetLookupNeedsRebuilding=" + labelSetLookupNeedsRebuilding +
                '}';
    }

    public List<Value> getValues() {
        return values;
    }

    public void setValues(List<Value> values) {
        this.values = values;
    }

    public List<Label> getParents() {
        return parents;
    }

    public void setParents(List<Label> parents) {
        this.parents = parents;
    }

    public List<Label> getChildren() {
        return children;
    }

    public void setChildren(List<Label> children) {
        this.children = children;
    }

    public List<Label> getPeers() {
        return peers;
    }

    public void setPeers(List<Label> peers) {
        this.peers = peers;
    }

    // ok given the new in memory db model I'm going to use a list of values against each label, let's see how this goes



}
