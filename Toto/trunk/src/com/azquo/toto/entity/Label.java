package com.azquo.toto.entity;

import com.azquo.toto.memorydb.TotoMemoryDB;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;

/**
 * Created with IntelliJ IDEA.
 * User: cawley
 * Date: 16/10/13
 * Time: 19:17
 * A fundamental Toto object, labels only have names but they can have parent and child relationships with multiple
 * other labels. Sets of labels.
 *
 * OK we want this object to only be modified if explicit functions are called, hence getters must not return mutable objects
 * and setters must make it clear what is going on
 *
 */
public final class Label extends StandardEntity {

    // leaving here as a reminder to consider proper logging
    //private static final Logger logger = Logger.getLogger(Label.class.getName());
    // data fields
    private String name;

    // memory db structure bits. There may be better ways to do this but we'll leave it here for the mo

    // should they be maps or sets?
    private List<Value> values;
    private List<Label> parents;
    private List<Label> children;
    private List<Label> peers;

    boolean valuesChanged;
    boolean parentsChanged;
    boolean childrenChanged;
    boolean peersChanged;

    public Label(int id, String name) {
        this.id = id;
        this.name = name;
        values = new ArrayList<Value>();
        parents = new ArrayList<Label>();
        children = new ArrayList<Label>();
        peers = new ArrayList<Label>();
        valuesChanged = false;
        parentsChanged = false;
        childrenChanged = false;
        peersChanged = false;
    }

    // used after database load and saves
    @Override
    public void syncedToDB(){
        super.syncedToDB();
        valuesChanged = false;
        parentsChanged = false;
        childrenChanged = false;
        peersChanged = false;

    }

    public String getName() {
        return name;
    }

    // needs the db to check the name is not there

    public synchronized void changeLabelNameWillBePersisted(String name, TotoMemoryDB totoMemoryDB) throws Exception
    {
        if (totoMemoryDB.getLabelByName(name) != null){
            throw new Exception("that label name already exists in the database");
        }
        this.name = name;
        entityColumnsChanged = true;
        inspectForPersistence = true;
    }

    // Generated by Intellij, Dr. Mike thinks it a good idea, I'll follow suit
    // it's worth noting that if we start using sets and the like in anger then hash code and equals may become significant

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Label label = (Label) o;
        return name.equalsIgnoreCase(label.name);
    }

    @Override
    public int hashCode() {
        return name.hashCode();
    }

    @Override
    public String toString() {
        return "Label{" +
                "id='" + id + '\'' +
                "name='" + name + '\'' +
                '}';
    }

    public List<Value> getValues() {
        return Collections.unmodifiableList(values);
    }

    public synchronized void setValuesWillBePersisted(List<Value> values) {
        this.values = values;
        valuesChanged = true;
        inspectForPersistence = true;
    }

    public List<Label> getParents() {
        return Collections.unmodifiableList(parents);
    }

    public synchronized void setParentsWillBePersisted(List<Label> parents) {
        this.parents = parents;
        parentsChanged = true;
        inspectForPersistence = true;
    }

    public List<Label> getChildren() {
        return Collections.unmodifiableList(children);
    }

    public synchronized void setChildrenWillBePersisted(List<Label> children) {
        this.children = children;
        childrenChanged = true;
        inspectForPersistence = true;
    }

    public List<Label> getPeers() {
        return Collections.unmodifiableList(peers);
    }

    public synchronized void setPeersWillBePersisted(List<Label> peers) {
        this.peers = peers;
        peersChanged = true;
        inspectForPersistence = true;
    }

}
